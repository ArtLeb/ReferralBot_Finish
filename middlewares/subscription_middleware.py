from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, Update
from typing import Callable, Dict, Any, Awaitable, Union
import logging

logger = logging.getLogger(__name__)

class SubscriptionMiddleware(BaseMiddleware):
    def __init__(self):
        self.business_commands = {
            '/add_partner', '/add_admin', '/gen_coupons', 
            '/set_discount', '/set_commission', '/add_group',
            '–°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω', '–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞', '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞',
            '–ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é', '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω'
        }

    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        event_text = None
        event_command = None
        
        if isinstance(event, Message):
            event_text = event.text
            event_command = event.command
        elif isinstance(event, CallbackQuery) and event.message:
            event_text = event.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        if not self.requires_subscription(event_text, event_command):
            return await handler(event, data)
        
        logger.info(f"Checking subscription for event: {event_text or event_command}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_service = data.get("user_service")
        subscription_service = data.get("subscription_service")
        
        if not user_service or not subscription_service:
            logger.error("UserService or SubscriptionService not found in context")
            return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = None
        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        
        if not user_id:
            logger.warning("User ID not found in event")
            return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user_by_tg_id(user_id)
        if not user:
            logger.warning(f"User not found for ID: {user_id}")
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –¥–ª—è callback - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if isinstance(event, Message):
                await event.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        has_subscription = await subscription_service.check_subscription(user.id)
        
        if has_subscription:
            return await handler(event, data)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message = "üö´ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."
            
            if isinstance(event, Message):
                await event.answer(message)
            elif isinstance(event, CallbackQuery):
                await event.message.answer(message)
                await event.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback
            
            return
    
    def requires_subscription(self, text: str, command: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if command and command in self.business_commands:
            return True
        
        if text and any(keyword in text for keyword in self.business_commands):
            return True
            
        return False