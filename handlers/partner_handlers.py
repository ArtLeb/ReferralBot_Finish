from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from services.company_service import CompanyService
from services.coupon_service import CouponService
from services.user_service import UserService
from sqlalchemy.ext.asyncio import AsyncSession
from utils.states import PartnerStates
from utils.database.models import User
from utils.keyboards import companies_keyboard, locations_keyboard
import logging
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import KeyboardButton

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "–ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏")
async def list_companies(message: Message, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    service = CompanyService(session)
    companies = await service.get_user_companies(message.from_user.id)
    
    if not companies:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π")
        return
    
    await message.answer(
        "üè¢ –í–∞—à–∏ –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=companies_keyboard(companies)
    )

@router.callback_query(F.data.startswith("company_"))
async def select_company(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    company_id = int(callback.data.split("_")[1])
    service = CompanyService(session)
    company = await service.get_company_by_id(company_id)
    
    if not company:
        await callback.answer("–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await state.update_data(company_id=company_id)
    company_info = (
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company.Name_comp}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏–π: {len(company.locations)}"
    )
    
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏"))
    builder.row(KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"))
    builder.row(KeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω"))
    
    await callback.message.answer(company_info, reply_markup=builder.as_markup(resize_keyboard=True))
    await callback.answer()

@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏")
async def manage_locations(message: Message, state: FSMContext, session: AsyncSession):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    data = await state.get_data()
    company_id = data.get('company_id')
    
    if not company_id:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é")
        return
    
    service = CompanyService(session)
    locations = await service.get_locations_by_company(company_id)
    
    if not locations:
        await message.answer("–í —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ª–æ–∫–∞—Ü–∏–π")
        return
    
    await message.answer(
        "üìç –õ–æ–∫–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=locations_keyboard(locations)
    )

@router.message(F.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω")
async def generate_coupon(message: Message, state: FSMContext, session: AsyncSession):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞"""
    data = await state.get_data()
    company_id = data.get('company_id')
    
    if not company_id:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é")
        return
    
    await state.set_state(PartnerStates.generate_coupon_type)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –∫—É–ø–æ–Ω–∞:")

@router.message(PartnerStates.generate_coupon_type)
async def process_coupon_discount(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞"""
    try:
        discount = float(message.text)
        if discount <= 0 or discount > 100:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        
        data = await state.get_data()
        company_id = data.get('company_id')
        
        coupon_service = CouponService(session)
        coupon = await coupon_service.create_coupon_type(
            company_id=company_id,
            discount_percent=discount
        )
        
        await message.answer(f"‚úÖ –¢–∏–ø –∫—É–ø–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω! –ü—Ä–µ—Ñ–∏–∫—Å: {coupon.code_prefix}")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø –∫—É–ø–æ–Ω–∞")
        await state.clear()