from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.common_handlers import logger
from services.company_service import CompanyService
from services.coupon_service import CouponService
from utils.bot_obj import bot
from utils.keyboards import main_menu
from utils.states import CreateCouponTypeStates, CollaborationStates
from datetime import datetime

router = Router()


@router.callback_query(F.data.startswith("send_collab_"), CollaborationStates.collab_location_info)
async def start_coupon_type_creation(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    location_id = int(cb.data.split("_")[-1])
    comp_id = data['company_id']

    await state.update_data(
        company_id=comp_id,
        location_id=location_id,
        agent_owner_user_id=data['agent_owner_user_id'],
        agent_agree=False
    )

    await cb.message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.5):")
    await state.set_state(CreateCouponTypeStates.discount_percent)


@router.message(CreateCouponTypeStates.discount_percent)
async def get_discount_percent(message: Message, state: FSMContext):
    try:
        value = float(message.text)
        if not (0 < value <= 100):
            raise ValueError
        await state.update_data(discount_percent=value)
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.0):")
        await state.set_state(CreateCouponTypeStates.commission_percent)
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")


@router.message(CreateCouponTypeStates.commission_percent)
async def get_commission_percent(message: Message, state: FSMContext):
    try:
        value = float(message.text)
        if not (0 <= value <= 100):
            raise ValueError
        await state.update_data(commission_percent=value)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="groups_yes"),
             InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="groups_no")]
        ])
        await message.answer("üìö –¢—Ä–µ–±—É—é—Ç—Å—è –≤—Å–µ –≥—Ä—É–ø–ø—ã?", reply_markup=keyboard)
        await state.set_state(CreateCouponTypeStates.require_all_groups)
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.callback_query(CreateCouponTypeStates.require_all_groups)
async def get_groups(cb: CallbackQuery, state: FSMContext):
    is_required = cb.data == "groups_yes"
    await state.update_data(require_all_groups=is_required)
    await cb.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞:")
    await state.set_state(CreateCouponTypeStates.usage_limit)


@router.message(CreateCouponTypeStates.usage_limit)
async def get_usage_limit(message: Message, state: FSMContext):
    try:
        limit = int(message.text)
        await state.update_data(usage_limit=limit)
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(CreateCouponTypeStates.start_date)
    except Exception as e:
        print(e)
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


@router.message(CreateCouponTypeStates.start_date)
async def get_start_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(start_date=date.isoformat())
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(CreateCouponTypeStates.end_date)
    except Exception as e:
        print(e)
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")


@router.message(CreateCouponTypeStates.end_date)
async def get_end_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(end_date=date.isoformat())
        await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞:")
        await state.set_state(CreateCouponTypeStates.days_for_used)
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")


@router.message(CreateCouponTypeStates.days_for_used)
async def get_days_for_used(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        await state.update_data(days_for_used=days)

        data = await state.get_data()

        summary = (
            f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω–∞:</b>\n"
            f"üí∏ –°–∫–∏–¥–∫–∞: {data['discount_percent']}%\n"
            f"üí∞ –ö–æ–º–∏—Å—Å–∏—è: {data['commission_percent']}%\n"
            f"üìö –í—Å–µ –≥—Ä—É–ø–ø—ã: {'–î–∞' if data['require_all_groups'] else '–ù–µ—Ç'}\n"
            f"üî¢ –õ–∏–º–∏—Ç: {data['usage_limit']}\n"
            f"üìÖ –î–∞—Ç—ã: {data['start_date']} ‚Äî {data['end_date']}\n"
            f"‚è≥ –î–Ω–µ–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {data['days_for_used']}\n\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞."
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_coupon_type")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_coupon_type")]
        ])

        await message.answer(summary, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(CreateCouponTypeStates.confirm)
    except Exception as e:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


@router.callback_query(CreateCouponTypeStates.confirm, F.data == "confirm_coupon_type")
async def confirm_coupon_type(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    coupon_service = CouponService(session)
    start_date = datetime.fromisoformat(data["start_date"]).date()
    end_date = datetime.fromisoformat(data["end_date"]).date()

    coupon = await coupon_service.create_coupon_type(
        company_id=data["my_company_id"],
        location_id=data["my_location_id"],
        discount_percent=data["discount_percent"],
        commission_percent=data["commission_percent"],
        require_all_groups=data["require_all_groups"],
        usage_limit=data["usage_limit"],
        start_date=start_date,
        end_date=end_date,
        company_agent_id=data["agent_company_id"],
        location_agent_id=data["agent_location_id"],
        days_for_used=data["days_for_used"],
    )

    await cb.message.answer("üéâ –ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    await cb.message.delete()
    await cb.message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ReferralBot!",
        reply_markup=await main_menu(session, cb.message.from_user.id)
    )
    await state.clear()

    agent_user_id = data.get("agent_owner_user_id")
    if not agent_user_id:
        return
    comp_service = CompanyService(session)

    my_location = await comp_service.get_location_by_id(data["location_id"])
    my_company = await comp_service.get_company_by_id(data["company_id"])

    agent_location = await comp_service.get_location_by_id(data["agent_location_id"])
    agent_company = await comp_service.get_company_by_id(data["agent_company_id"])

    notify_text = (
        f"üì£ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é!</b>\n\n"

        f"üë§ <b>–ö–æ–º–ø–∞–Ω–∏—è-–∑–∞—è–≤–∏—Ç–µ–ª—å</b>\n"
        f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {my_company.Name_comp}\n"
        # f"üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {my_location.name_loc}\n"
        f"üí∏ <b>–°–∫–∏–¥–∫–∞:</b> {coupon.discount_percent}%\n"
        f"üíº <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {coupon.commission_percent}%\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è:</b> {coupon.start_date.strftime('%d.%m.%Y')} ‚Äì {coupon.end_date.strftime('%d.%m.%Y')}\n"
        f"üî¢ <b>–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {coupon.usage_limit}\n"
        f"‚è±Ô∏è <b>–î–Ω–µ–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> {coupon.days_for_used}\n"
        f"üÜî <b>–ö–æ–¥ –∫—É–ø–æ–Ω–∞:</b> <code>{coupon.code_prefix}</code>\n\n"

        f"üõ° <b>–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è</b>\n"
        f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {agent_company.Name_comp}\n"

        f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.</i>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"req_collab_confirm_{cb.from_user.id}_{coupon.id_coupon_type}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"req_collab_reject_{cb.from_user.id}_{coupon.id_coupon_type}"
            )
        ]
    ])

    try:
        await bot.send_message(
            chat_id=agent_user_id,
            text=notify_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É: {e}")


@router.callback_query(CreateCouponTypeStates.confirm, F.data == "cancel_coupon_type")
async def cancel_coupon_type(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
