from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.category_service import CategoryService
from services.coupon_service import CouponService
from services.user_service import UserService
from services.company_service import CompanyService
from sqlalchemy.ext.asyncio import AsyncSession
from utils.database.models import User, CompanyCategory
from utils.keyboards import categories_keyboard
import logging
from aiogram.filters import StateFilter, Command
from utils.states import AdminStates
import qrcode
from io import BytesIO
from utils.bot_obj import bot

router = Router()
logger = logging.getLogger(__name__)

class CategoryStates(StatesGroup):
    waiting_for_category_name = State()
    waiting_for_category_selection = State()

@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
async def manage_categories(message: Message, session: AsyncSession):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–π"""
    category_service = CategoryService(session)
    categories = await category_service.get_all_categories()
    
    if not categories:
        await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?")
        return
    
    await message.answer(
        "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–π:",
        reply_markup=categories_keyboard(categories)
    )

@router.callback_query(F.data == "add_category")
async def add_category_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(CategoryStates.waiting_for_category_name)
    await callback.answer()

@router.message(CategoryStates.waiting_for_category_name)
async def add_category_process(message: Message, state: FSMContext, session: AsyncSession):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_name = message.text.strip()
    if not category_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    category_service = CategoryService(session)
    
    try:
        existing = await category_service.get_category_by_name(category_name)
        if existing:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        category = await category_service.create_category(category_name)
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        
        categories = await category_service.get_all_categories()
        await message.answer(
            "üìÇ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:",
            reply_markup=categories_keyboard(categories)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    finally:
        await state.clear()

@router.message(F.text == "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω")
async def activate_coupon(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞:")
    await state.set_state(AdminStates.waiting_for_coupon_code)

@router.message(F.text, StateFilter(AdminStates.waiting_for_coupon_code))
async def process_coupon_activation(message: Message, state: FSMContext, session: AsyncSession):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É–ø–æ–Ω–∞"""
    coupon_code = message.text.strip()
    coupon_service = CouponService(session)
    
    try:
        coupon = await coupon_service.get_coupon_by_code(coupon_code)
        if not coupon:
            await message.answer("‚ùå –ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        if coupon.status.name != "active":
            await message.answer(f"‚ùå –ö—É–ø–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è")
            await state.clear()
            return
        
        await state.update_data(coupon_code=coupon_code)
        await state.set_state(AdminStates.waiting_for_order_amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—É–ø–æ–Ω–∞")
        await state.clear()

@router.message(F.text, StateFilter(AdminStates.waiting_for_order_amount))
async def process_order_amount(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞"""
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞")
        
        data = await state.get_data()
        coupon_code = data['coupon_code']
        
        coupon_service = CouponService(session)
        await coupon_service.redeem_coupon(
            coupon_code=coupon_code,
            redeemed_by=message.from_user.id,
            amount=amount
        )
        
        await message.answer("‚úÖ –ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω")
        await state.clear()

@router.message(Command("get_coupon_qr"))
async def handle_get_coupon_qr(message: Message, session: AsyncSession):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –∫—É–ø–æ–Ω–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_service = UserService(session)
    if not await user_service.is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = message.text.split()
    if len(args) != 3:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n`/get_coupon_qr <ID_–∫—É–ø–æ–Ω–∞> <ID_–ª–æ–∫–∞—Ü–∏–∏>`", parse_mode="Markdown")
        return

    try:
        collaboration_id = int(args[1])
        location_id = int(args[2])
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏
    coupon_service = CouponService(session)
    if not await coupon_service.collaboration_exists(collaboration_id):
        await message.answer(f"‚ùå –ö—É–ø–æ–Ω {collaboration_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    company_service = CompanyService(session)
    if not await company_service.location_exists(location_id):
        await message.answer(f"‚ùå –õ–æ–∫–∞—Ü–∏—è {location_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è deep-—Å—Å—ã–ª–∫–∏
    bot_username = (await bot.get_me()).username
    deep_link = f"https://t.me/{bot_username}?start=coupon_{collaboration_id}_{message.from_user.id}_{location_id}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞
    qr = qrcode.make(deep_link)
    img_bytes = BytesIO()
    qr.save(img_bytes, format='PNG')
    img_bytes.seek(0)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await message.answer_photo(
        photo=img_bytes,
        caption=f"‚úÖ QR –¥–ª—è –≤—ã–¥–∞—á–∏ –∫—É–ø–æ–Ω–∞:\n"
                f"‚Ä¢ –ö—É–ø–æ–Ω: `{collaboration_id}`\n"
                f"‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: `{location_id}`\n"
                f"–°—Å—ã–ª–∫–∞: `{deep_link}`",
        parse_mode="Markdown"
    )