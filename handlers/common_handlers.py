# common_handlers.py
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from utils.database.models import User
from services.role_service import RoleService
from services.company_service import CompanyService
from services.category_service import CategoryService
from sqlalchemy.ext.asyncio import AsyncSession
import logging

from utils.keyboards import main_menu, loc_categories_keyboard
from utils.states import RegistrationStates

logger = logging.getLogger(__name__)
router = Router()


@router.message(RegistrationStates.CHOOSING_ROLE, F.text == "–Ø –∫–ª–∏–µ–Ω—Ç")
async def client_selected(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    await state.clear()
    await message.answer(
        "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç!",
        reply_markup=await main_menu(session, message.from_user.id)
    )


@router.message(RegistrationStates.CHOOSING_ROLE, F.text == "–Ø –ø–∞—Ä—Ç–Ω–µ—Ä (–∫–æ–º–ø–∞–Ω–∏—è)")
async def partner_selected(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    await state.set_state(RegistrationStates.COMPANY_NAME)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:\n\n"
        "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /cancel",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(RegistrationStates.COMPANY_NAME)
async def start_create_new_location(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(company_name=message.text)
    category_service = CategoryService(session)
    categories = await category_service.get_all_categories()
    keyboard = loc_categories_keyboard(categories, selected_category=[])
    await message.answer(
        text=f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        reply_markup=keyboard
    )
    await state.update_data(selected_category=[], current_page=0)
    await state.set_state(RegistrationStates.COMPANY_CATEGORY_RECORD)


@router.callback_query(RegistrationStates.COMPANY_CATEGORY_RECORD)
async def process_company_name(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    data = await state.get_data()
    selected_category: list = data.get('selected_category', [])
    current_page: int = data.get('current_page', 0)

    if cb.data.startswith('category_'):
        category_id = int(cb.data.split('_')[1])
        if category_id in selected_category:
            selected_category.remove(category_id)
        else:
            selected_category.append(category_id)

        await state.update_data(selected_category=selected_category)

        category_service = CategoryService(session)
        categories = await category_service.get_all_categories()
        keyboard = loc_categories_keyboard(categories, selected_category, current_page)

        await cb.message.edit_reply_markup(reply_markup=keyboard)

    elif cb.data.startswith('page_'):
        new_page = int(cb.data.split('_')[1])
        await state.update_data(current_page=new_page)

        category_service = CategoryService(session)
        categories = await category_service.get_all_categories()
        keyboard = loc_categories_keyboard(categories, selected_category, new_page)

        await cb.message.edit_reply_markup(reply_markup=keyboard)

    elif cb.data == 'add_category':
        if not selected_category:
            await cb.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
            return

        await cb.message.answer(text="üíæ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        await cb.message.delete()
        await cb.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:")
        await state.set_state(RegistrationStates.CITY_SELECTION)
    elif cb.data == 'noop':
        await cb.answer()


@router.message(RegistrationStates.CITY_SELECTION)
async def process_city(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    await state.update_data(city=message.text)
    await state.set_state(RegistrationStates.COMPANY_ADDRESS_URL)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏:")


@router.message(RegistrationStates.COMPANY_ADDRESS_URL)
async def process_city(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –°—Å—ã–ª–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    await state.update_data(address=message.text)
    await state.set_state(RegistrationStates.COMPANY_ADDRESS)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –°—Å–ª—ã–∫—É –Ω–∞ –∫–∞—Ä—Ç–∞—Ö:")


@router.message(RegistrationStates.COMPANY_ADDRESS)
async def process_company_address(message: Message, state: FSMContext, session: AsyncSession):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    data = await state.get_data()
    company_service = CompanyService(session)

    try:
        company = await company_service.create_company(
            name=data['company_name'],
            owner_id=message.from_user.id
        )

        location = await company_service.create_location(
            company_id=company.id_comp,
            city=data['city'],
            address=data['address'],
            map_url=message.text,
            name_loc=data['company_name'],
            main_loc=True
        )
        for category_id in data.get('selected_category', []):
            await company_service.set_loc_category(
                comp_id=company.id_comp,
                id_location=location.id_location,
                id_category=category_id
            )

        role_service = RoleService(session)
        await role_service.assign_role_to_user(
            user_id=message.from_user.id,
            role_name='partner',
            company_id=company.id_comp,
            location_id=location.id_location
        )

        await state.clear()
        await message.answer(
            f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è {company.Name_comp} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
            reply_markup=await main_menu(session, message.from_user.id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: Message, session: AsyncSession, user: User):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    role_service = RoleService(session)
    user_roles = await role_service.get_user_roles(user.id)

    roles_info = "\n".join([
        f"- {role.role} –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID {role.company_id}"
        for role in user_roles
    ]) if user_roles else "–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π"

    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"‚ñ´Ô∏è ID: {user.id}\n"
        f"‚ñ´Ô∏è –ò–º—è: {user.first_name} {user.last_name}\n"
        f"‚ñ´Ô∏è Telegram ID: {user.id_tg}\n"
        f"‚ñ´Ô∏è –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.reg_date}\n\n"
        f"üîë <b>–í–∞—à–∏ —Ä–æ–ª–∏:</b>\n{roles_info}"
    )
    await message.answer(profile_text, parse_mode="HTML")


@router.message(F.text == "–ü–æ–º–æ—â—å")
async def help_command(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "‚Ä¢ <b>–ü–æ–ª—É—á–∏—Ç—å –∫—É–ø–æ–Ω</b> - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—É–ø–æ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É\n"
        "‚Ä¢ <b>–ú–æ–∏ –∫—É–ø–æ–Ω—ã</b> - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤\n"
        "‚Ä¢ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> - –≤–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å\n"
        "‚Ä¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–π\n\n"
        "–î–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:\n"
        "‚Ä¢ <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω</b> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É–ø–æ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚Ä¢ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n"
        "‚Ä¢ <b>–ú–æ–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º\n\n"
        "–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        "‚Ä¢ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚Ä¢ <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω</b> - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É–ø–æ–Ω–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"
    )
    await message.answer(help_text, parse_mode="HTML")
