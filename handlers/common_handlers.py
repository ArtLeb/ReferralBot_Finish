from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state
from services.subscription_service import SubscriptionService
from utils.database.models import User, CompanyCategory
from services.auth_service import AuthService
from services.role_service import RoleService
from services.company_service import CompanyService
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import logging

logger = logging.getLogger(__name__)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
class RegistrationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    CHOOSING_ROLE = State()          # –í—ã–±–æ—Ä —Ä–æ–ª–∏ (–∫–ª–∏–µ–Ω—Ç/–ø–∞—Ä—Ç–Ω–µ—Ä)
    COMPANY_NAME = State()            # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    COMPANY_CATEGORY = State()        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    COMPANY_LOCATION = State()        # –í–≤–æ–¥ –ª–æ–∫–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    COMPANY_ADDRESS = State()         # –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏

async def main_menu(session: AsyncSession, user: User) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    builder = ReplyKeyboardBuilder()
    role_service = RoleService(session)
    
    # –ö–Ω–æ–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º
    builder.row(KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    builder.row(KeyboardButton(text="–ü–æ–º–æ—â—å"))
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    builder.row(KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫—É–ø–æ–Ω"))
    builder.row(KeyboardButton(text="–ú–æ–∏ –∫—É–ø–æ–Ω—ã"))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
    if await role_service.has_permission(user, "view_stats"):
        builder.row(KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    
    if await role_service.has_permission(user, "gen_coupons"):
        builder.row(KeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω"))
    
    if await role_service.has_permission(user, "add_admins"):
        builder.row(KeyboardButton(text="–ú–æ–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"))
    
    if await role_service.has_permission(user, "add_partners"):
        builder.row(KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞"))
    
    if await role_service.has_permission(user, "check_subscription"):
        builder.row(KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
        builder.row(KeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω"))
    
    if await role_service.has_permission(user, "get_coupons"):
        builder.row(KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å QR"))
    
    return builder.as_markup(
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é"
    )

@router.message(F.text == "/start")
async def start(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    """
    auth_service = AuthService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = await auth_service.get_or_create_user(
        tg_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name or ""
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª–∏
    role_service = RoleService(session)
    user_roles = await role_service.get_user_roles(user.id)
    
    if user_roles:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–æ–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ReferralBot!",
            reply_markup=await main_menu(session, user)
        )
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
        await state.set_state(RegistrationStates.CHOOSING_ROLE)
        builder = ReplyKeyboardBuilder()
        builder.row(KeyboardButton(text="–Ø –∫–ª–∏–µ–Ω—Ç"))
        builder.row(KeyboardButton(text="–Ø –ø–∞—Ä—Ç–Ω–µ—Ä (–∫–æ–º–ø–∞–Ω–∏—è)"))
        
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
            "‚ÑπÔ∏è –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –¥–æ 5 –∫–æ–º–ø–∞–Ω–∏–π",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )

@router.message(Command("cancel"), ~StateFilter(default_state))
async def cancel_registration(message: Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await state.clear()
    await message.answer(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(RegistrationStates.CHOOSING_ROLE, F.text == "–Ø –∫–ª–∏–µ–Ω—Ç")
async def client_selected(message: Message, session: AsyncSession, state: FSMContext, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
    """
    role_service = RoleService(session)
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é —Å ID=1(1, '–°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è', 0, 'system'))
    await role_service.assign_role_to_user(
        user_id=user.id,
        role_name='client',
        company_id=1  # ID —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    )
    
    await state.clear()
    await message.answer(
        "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç!",
        reply_markup=await main_menu(session, user)
    )

@router.message(RegistrationStates.CHOOSING_ROLE, F.text == "–Ø –ø–∞—Ä—Ç–Ω–µ—Ä (–∫–æ–º–ø–∞–Ω–∏—è)")
async def partner_selected(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    """
    await state.set_state(RegistrationStates.COMPANY_NAME)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:\n\n"
        "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /cancel",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(RegistrationStates.COMPANY_NAME)
async def process_company_name(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    """
    await state.update_data(company_name=message.text)
    await state.set_state(RegistrationStates.COMPANY_CATEGORY)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î
        result = await session.execute(select(CompanyCategory))
        categories = result.scalars().all()
        
        if not categories:
            await message.answer("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            return
            
        builder = ReplyKeyboardBuilder()
        for category in categories:
            builder.add(KeyboardButton(text=category.name))
        builder.adjust(2)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–ø–∞–Ω–∏–∏:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(RegistrationStates.COMPANY_CATEGORY)
async def process_company_category(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î
        result = await session.execute(
            select(CompanyCategory).where(CompanyCategory.name == message.text)
        )
        category = result.scalar_one_or_none()
        
        if not category:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return
        
        await state.update_data(company_category_id=category.id, company_category=message.text)
        await state.set_state(RegistrationStates.COMPANY_LOCATION)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è:",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(RegistrationStates.COMPANY_LOCATION)
async def process_company_location(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    await state.update_data(company_location=message.text)
    await state.set_state(RegistrationStates.COMPANY_ADDRESS)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏:")

@router.message(RegistrationStates.COMPANY_ADDRESS)
async def process_company_address(
    message: Message, 
    state: FSMContext, 
    session: AsyncSession,
    user: User
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    company_service = CompanyService(session)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
        company = await company_service.create_company(
            name=data['company_name'],
            category=data['company_category_id'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            owner_id=user.id
        )
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        await company_service.create_location(
            company_id=company.id_comp,
            city=data['company_location'],
            address=message.text,
            name=f"–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è {company.Name_comp}"
        )
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–æ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        role_service = RoleService(session)
        await role_service.assign_role_to_user(
            user_id=user.id,
            role_name='partner',
            company_id=company.id_comp
        )
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è {company.Name_comp} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
            reply_markup=await main_menu(session, user)
        )
    except ValueError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–π
        await state.clear()
        await message.answer(
            f"‚ùå {str(e)}",
            reply_markup=await main_menu(session, user)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: Message, session: AsyncSession, user: User):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    role_service = RoleService(session)
    user_roles = await role_service.get_user_roles(user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª—è—Ö
    roles_info = "\n".join([
        f"- {role.role} –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID {role.company_id}" 
        for role in user_roles
    ]) if user_roles else "–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π"
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"‚ñ´Ô∏è ID: {user.id}\n"
        f"‚ñ´Ô∏è –ò–º—è: {user.first_name} {user.last_name}\n"
        f"‚ñ´Ô∏è Telegram ID: {user.id_tg}\n"
        f"‚ñ´Ô∏è –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.reg_date}\n\n"
        f"üîë <b>–í–∞—à–∏ —Ä–æ–ª–∏:</b>\n{roles_info}"
    )
    
    await message.answer(profile_text, parse_mode="HTML")

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def check_subscription_command(message: Message, session: AsyncSession, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫
    role_service = RoleService(session)
    subscription_service = SubscriptionService(session, role_service)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await subscription_service.check_subscription(user.id)
    
    if has_subscription:
        response = "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!"
    else:
        response = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    await message.answer(response)

@router.message(F.text == "–ü–æ–º–æ—â—å")
async def help_command(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "‚Ä¢ <b>–ü–æ–ª—É—á–∏—Ç—å –∫—É–ø–æ–Ω</b> - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—É–ø–æ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É\n"
        "‚Ä¢ <b>–ú–æ–∏ –∫—É–ø–æ–Ω—ã</b> - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤\n"
        "‚Ä¢ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> - –≤–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å\n\n"
        "–î–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:\n"
        "‚Ä¢ <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω</b> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É–ø–æ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚Ä¢ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n"
        "‚Ä¢ <b>–ú–æ–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º\n\n"
        "–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        "‚Ä¢ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚Ä¢ <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω</b> - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É–ø–æ–Ω–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ\n\n"
        "‚ùï –í–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π /cancel"
    )
    
    await message.answer(help_text, parse_mode="HTML")