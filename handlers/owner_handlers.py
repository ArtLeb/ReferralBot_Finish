from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.role_service import RoleService
from services.user_service import UserService
from services.action_logger import ActionLogger
from sqlalchemy.ext.asyncio import AsyncSession
from utils.database.models import User
from typing import Optional

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
class AddPartnerStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_company_id = State()
    waiting_for_location_id = State()

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
async def add_partner_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º:")
    await state.set_state(AddPartnerStates.waiting_for_user_id)

@router.message(AddPartnerStates.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext, session: AsyncSession):
    try:
        tg_id = int(message.text)
        await state.update_data(tg_id=tg_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:")
        await state.set_state(AddPartnerStates.waiting_for_company_id)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")

@router.message(AddPartnerStates.waiting_for_company_id)
async def process_company_id(message: Message, state: FSMContext, session: AsyncSession):
    try:
        company_id = int(message.text)
        await state.update_data(company_id=company_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ª–æ–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):")
        await state.set_state(AddPartnerStates.waiting_for_location_id)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(AddPartnerStates.waiting_for_location_id)
async def process_location_id(message: Message, state: FSMContext, session: AsyncSession):
    try:
        location_id = int(message.text) if message.text != "0" else None
        user_data = await state.get_data()
        
        tg_id = user_data['tg_id']
        company_id = user_data['company_id']
        
        user_service = UserService(session)
        role_service = RoleService(session)
        logger = ActionLogger(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        user = await user_service.get_user_by_tg_id(tg_id)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å 'partner'
        await role_service.assign_role_to_user(
            user_id=user.id,
            role_name='partner',
            company_id=company_id,
            location_id=location_id
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await logger.log_action(
            user_id=message.from_user.id,
            action_type='role_assigned',
            entity_id=user.id,
            details=f"–ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å partner –≤ –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}"
        )
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –∫–æ–º–ø–∞–Ω–∏—é ID {company_id}."
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 0.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def view_stats(message: Message, session: AsyncSession, user: User):
    role_service = RoleService(session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await role_service.has_permission(user, "view_stats"):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await role_service.get_system_stats()
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π: {stats['total_companies']}\n"
        response += f"‚Ä¢ –í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤: {stats['total_coupons']}\n"
        response += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤: {stats['used_coupons']}"
        
        await message.answer(response)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")