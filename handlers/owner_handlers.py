from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from services.role_service import RoleService
from services.user_service import UserService
from sqlalchemy.ext.asyncio import AsyncSession
from utils.database.models import User
from typing import Optional

router = Router()

class AddPartnerStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_company_id = State()
    waiting_for_location_id = State()

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
async def add_partner_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AddPartnerStates.waiting_for_user_id)

@router.message(AddPartnerStates.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        tg_id = int(message.text)
        await state.update_data(tg_id=tg_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–ø–∞–Ω–∏–∏:")
        await state.set_state(AddPartnerStates.waiting_for_company_id)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID")

@router.message(AddPartnerStates.waiting_for_company_id)
async def process_company_id(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–æ–º–ø–∞–Ω–∏–∏"""
    try:
        company_id = int(message.text)
        await state.update_data(company_id=company_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ª–æ–∫–∞—Ü–∏–∏ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):")
        await state.set_state(AddPartnerStates.waiting_for_location_id)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–º–ø–∞–Ω–∏–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@router.message(AddPartnerStates.waiting_for_location_id)
async def process_location_id(message: Message, state: FSMContext, session: AsyncSession):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    try:
        location_id = int(message.text) if message.text != "0" else None
        user_data = await state.get_data()
        tg_id = user_data['tg_id']
        company_id = user_data['company_id']
        
        user_service = UserService(session)
        role_service = RoleService(session)
        
        user = await user_service.get_user_by_tg_id(tg_id)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        await role_service.assign_role_to_user(
            user_id=user.id,
            role_name='partner',
            company_id=company_id,
            location_id=location_id
        )
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä")
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ª–æ–∫–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 0")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def view_stats(message: Message, session: AsyncSession, user: User):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    role_service = RoleService(session)
    
    if not await role_service.has_permission(user, "view_stats"):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    try:
        report_service = ReportService(session)
        stats = await report_service.get_system_stats()
        
        response = (
            "üìä –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏–π: {stats['total_companies']}\n"
            f"üé´ –ö—É–ø–æ–Ω–æ–≤: {stats['total_coupons']}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {stats['used_coupons']}\n"
            f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_subscriptions']}"
        )
        
        await message.answer(response)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.message(F.text == "–û—Ç—á–µ—Ç –ø–æ –∫—É–ø–æ–Ω–∞–º")
async def coupons_report(message: Message, session: AsyncSession):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫—É–ø–æ–Ω–∞–º"""
    report_service = ReportService(session)
    try:
        report = await report_service.generate_coupons_report()
        await message.answer_document(
            document=report,
            caption="üìä –û—Ç—á–µ—Ç –ø–æ –∫—É–ø–æ–Ω–∞–º"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")