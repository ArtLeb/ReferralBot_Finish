import logging

from aiogram import Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.common_handlers import partner_selected
from services.auth_service import AuthService
from services.role_service import RoleService
from utils.keyboards import main_menu
from utils.states import RegistrationStates

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("start"))
async def start(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    auth_service = AuthService(session)
    await auth_service.get_or_create_user(
        tg_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name or ""
    )
    await state.clear()
    role_service = RoleService(session)
    user_roles = await role_service.get_user_roles(message.from_user.id)

    if user_roles:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ReferralBot!",
            reply_markup=await main_menu(session, message.from_user.id)
        )
    else:
        await state.set_state(RegistrationStates.CHOOSING_ROLE)
        builder = ReplyKeyboardBuilder()
        builder.row(KeyboardButton(text="–Ø –∫–ª–∏–µ–Ω—Ç"))
        builder.row(KeyboardButton(text="–Ø –ø–∞—Ä—Ç–Ω–µ—Ä (–∫–æ–º–ø–∞–Ω–∏—è)"))
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
            "‚ÑπÔ∏è –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –¥–æ 5 –∫–æ–º–ø–∞–Ω–∏–π",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )


@router.message(Command("regcomp"))
async def regcomp(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await partner_selected(message=message, state=state)


@router.message(Command("cancel"), ~StateFilter(default_state))
async def cancel_registration(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await message.answer(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=ReplyKeyboardRemove()
    )
