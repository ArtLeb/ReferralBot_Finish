from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
import json
from aiogram.utils.keyboard import ReplyKeyboardBuilder, ReplyKeyboardMarkup
from aiogram.types import KeyboardButton
from services import user_service
from utils.database.models import User
from services.user_service import UserService
from datetime import date, timedelta
from services.role_service import RoleService
from datetime import date, timedelta
from services.action_logger import CityLogger
from services.category_service import CategoryService
from services.company_service import CompanyService

from services.coupon_service import CouponService
from utils.collab_helper import handle_pagination, filter_categories, filter_cities, comp_locations, loc_info_text, \
    collab_action_keyboard
from utils.keyboards import coupon_menu_keyboard, loc_comp_keyboard, loc_categories_keyboard, loc_city_keyboard, \
    comp_location_keyboard
from utils.states import PartnerStates, CollaborationStates, CreateLocationStates

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–µ–π
@router.message(PartnerStates.select_location_action, F.text == "–ù–∞–∑–∞–¥")
async def back_to_company_menu(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    data = await state.get_data()
    company_id = data.get('company_id')
    
    if company_id:
        comp_service = CompanyService(session)
        locations = await comp_service.get_locations_by_company(company_id=company_id)
        
        keyboard = comp_location_keyboard(locations=locations, page=0)
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
        await state.set_state(PartnerStates.edit_location_select)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()

@router.message(PartnerStates.select_location_action, F.text == "–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏")
async def start_collab_menu(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏'. –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è–º–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–Ø –≤—ã–¥–∞—é –∫—É–ø–æ–Ω—ã", callback_data='iam_coupon'))
    builder.row(InlineKeyboardButton(text="–Ø –∞–≥–µ–Ω—Ç", callback_data='iam_agent'))
    builder.row(InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ (–≤—Å–µ)", callback_data='all_active_collabs_main'))
    builder.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_location_menu'))
    builder.adjust(1)

    await message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è–º–∏',
        reply_markup=builder.as_markup()
    )
    await state.set_state(CollaborationStates.COLLABORATION_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
@router.message(PartnerStates.select_location_action, F.text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
async def handle_manage_admins(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    location_id = data.get('location_id')
    company_id = data.get('company_id')
    
    if not location_id or not company_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    role_service = RoleService(session)
    admins = await role_service.get_location_admins(company_id, location_id)
    
    text = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏:\n"
    if admins:
        user_service = UserService(session)  
        
        for admin_role in admins:  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID –∏–∑ —Ä–æ–ª–∏
            user = await user_service.get_user_by_tg_id(admin_role.user_id)
            
            if user:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                text += f"- {name} (Telegram ID: {user.id_tg})\n"
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Ä–æ–ª–∏
                text += f"- [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] (Telegram ID: {admin_role.user_id})\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π 
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")],
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(PartnerStates.manage_admins)

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
@router.message(PartnerStates.manage_admins, F.text == "–ù–∞–∑–∞–¥")
async def back_to_location_management(message: Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏")],
            [KeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await state.set_state(PartnerStates.select_location_action)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏:", reply_markup=markup)

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
@router.message(PartnerStates.manage_admins, F.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def start_adding_admin(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")
    await state.set_state(PartnerStates.add_admin_tg_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Telegram ID
@router.message(PartnerStates.add_admin_tg_id)
async def process_add_admin_tg_id(message: Message, state: FSMContext, session: AsyncSession):
    try:
        tg_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
        return

    data = await state.get_data()
    company_id = data.get('company_id')
    location_id = data.get('location_id')
    
    user_service = UserService(session)
    user = await user_service.get_user_by_tg_id(tg_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏
    role_service = RoleService(session)
    existing = await role_service.get_user_role_in_location(
        tg_id=tg_id,
        company_id=company_id,
        location_id=location_id,
        role='admin'
    )
    
    if existing:
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
    end_date = date.today() + timedelta(days=365)
    await role_service.add_admin_role(
        tg_id=tg_id,
        company_id=company_id,
        location_id=location_id,
        end_date=end_date,
        changed_by=message.from_user.id
    )
    
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. (Telegram ID: {tg_id})")
    await handle_manage_admins(message, state, session)

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(PartnerStates.manage_admins, F.text == "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def start_removing_admin(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    company_id = data.get('company_id')
    location_id = data.get('location_id')
    
    role_service = RoleService(session)
    admins = await role_service.get_location_admins(company_id, location_id)
    
    if not admins:
        await message.answer("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    keyboard = ReplyKeyboardBuilder()
    admin_records = {}
    user_service = UserService(session)
    
    for admin in admins:
        user = await user_service.get_user_by_tg_id(admin.user_id)
        display_name = f"{user.first_name} {user.last_name}" if user else f"ID: {admin.user_id}"
        btn_text = f"{display_name} (TG: {admin.user_id})"
        
        admin_records[btn_text] = admin.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø–∏—Å–∏ —Ä–æ–ª–∏
        keyboard.add(KeyboardButton(text=btn_text))
    
    keyboard.add(KeyboardButton(text="–ù–∞–∑–∞–¥"))
    keyboard.adjust(1)
    
    await state.update_data(admin_records=admin_records)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.set_state(PartnerStates.remove_admin)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(PartnerStates.remove_admin)
async def process_remove_admin(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    admin_records = data.get("admin_records", {})
    
    if message.text == "–ù–∞–∑–∞–¥":
        await handle_manage_admins(message, state, session)
        return
        
    if message.text not in admin_records:
        await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    role_service = RoleService(session)
    success = await role_service.remove_admin_role(admin_records[message.text])
    
    if success:
        await message.answer("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    await handle_manage_admins(message, state, session)

@router.callback_query(CollaborationStates.COLLABORATION_MENU, F.data == 'back_to_location_menu')
async def back_to_location_menu(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–µ–π"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–µ–π
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏")],
            [KeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    await state.set_state(PartnerStates.select_location_action)
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏:", reply_markup=markup)
    await cb.message.delete()

@router.callback_query(CollaborationStates.COLLABORATION_MENU, F.data == 'iam_coupon')
async def iam_coupon_menu(cb: CallbackQuery, state: FSMContext):
    """
    –ú–µ–Ω—é –¥–ª—è —Ä–æ–ª–∏ "–Ø –≤—ã–¥–∞—é –∫—É–ø–æ–Ω—ã"
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –∞–≥–µ–Ω—Ç–∞", callback_data='iam_coupon_search'))
    builder.row(InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ (–º–æ–∏)", callback_data='my_active_collabs'))
    builder.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main_collab'))
    builder.adjust(1)

    await cb.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–æ–ª–∏ "–Ø –≤—ã–¥–∞—é –∫—É–ø–æ–Ω—ã":',
        reply_markup=builder.as_markup()
    )

@router.callback_query(CollaborationStates.COLLABORATION_MENU, F.data == 'iam_agent')
async def iam_agent_menu(cb: CallbackQuery, state: FSMContext):
    """
    –ú–µ–Ω—é –¥–ª—è —Ä–æ–ª–∏ "–Ø –∞–≥–µ–Ω—Ç"
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é", callback_data='collab_requests'))
    builder.row(InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏", callback_data='my_active_collabs'))
    builder.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main_collab'))
    builder.adjust(1)

    await cb.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–æ–ª–∏ "–Ø –∞–≥–µ–Ω—Ç":',
        reply_markup=builder.as_markup()
    )

@router.callback_query(CollaborationStates.COLLABORATION_MENU, F.data == 'back_to_main_collab')
async def back_to_main_menu(cb: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–π
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–Ø –≤—ã–¥–∞—é –∫—É–ø–æ–Ω—ã", callback_data='iam_coupon'))
    builder.row(InlineKeyboardButton(text="–Ø –∞–≥–µ–Ω—Ç", callback_data='iam_agent'))
    builder.row(InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ (–≤—Å–µ)", callback_data='all_active_collabs_main'))
    builder.adjust(1)

    await cb.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è–º–∏',
        reply_markup=builder.as_markup()
    )

@router.callback_query(CollaborationStates.COLLABORATION_MENU, F.data == 'iam_coupon_search')
async def start_find_agent(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏"""
    await state.set_state(CollaborationStates.filter_comp_start_menu)
    await search_collab(cb, state, session)

@router.callback_query(CollaborationStates.COLLABORATION_MENU, F.data == 'collab_requests')
async def show_collab_requests(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é
    """
    coupon_service = CouponService(session)
    requests = await coupon_service.get_collaboration_requests(
        user_id_tg=cb.from_user.id
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏
    serializable_requests = []
    for req in requests:
        serializable_requests.append({
            'id_coupon_type': req.id_coupon_type,
            'company_id': req.company_id,
            'code_prefix': req.code_prefix,
            'discount_percent': float(req.discount_percent),
            'commission_percent': float(req.commission_percent),
            'start_date': req.start_date.isoformat(),
            'end_date': req.end_date.isoformat()
        })
    
    await state.update_data(
        collab_requests=serializable_requests,
        current_page=0,
        request_type='collab_requests'
    )
    
    await state.set_state(CollaborationStates.view_requests)
    await display_requests_page(cb, state, session)

async def display_requests_page(
    cb: CallbackQuery, 
    state: FSMContext, 
    session: AsyncSession
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é
    """
    data = await state.get_data()
    requests_data = data["collab_requests"]
    current_page = data["current_page"]
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    page_size = 5
    start_index = current_page * page_size
    end_index = start_index + page_size
    page_items = requests_data[start_index:end_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "üì¨ <b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é</b>\n\n"
    
    if not requests_data:
        text = "ü§∑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é"
    else:
        for idx, req in enumerate(page_items, start=1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
            company_service = CompanyService(session)
            company = await company_service.get_company_by_id(req['company_id'])
            
            text += (
                f"{start_index + idx}. <b>{company.Name_comp}</b>\n"
                f"   üìÖ –°—Ä–æ–∫: {req['start_date'][:10]} - {req['end_date'][:10]}\n"
                f"   üí∞ –°–∫–∏–¥–∫–∞: {req['discount_percent']}%, –ö–æ–º–∏—Å—Å–∏—è: {req['commission_percent']}%\n"
                f"   üîë –ü—Ä–µ—Ñ–∏–∫—Å: {req['code_prefix']}\n\n"
            )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    for req in page_items:
        builder.row(
            InlineKeyboardButton(
                text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å {req['code_prefix']}",
                callback_data=f"accept_{req['id_coupon_type']}"
            ),
            InlineKeyboardButton(
                text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {req['code_prefix']}",
                callback_data=f"reject_{req['id_coupon_type']}"
            )
        )
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_row = []
    if current_page > 0:
        pagination_row.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="page_prev")
        )
    if end_index < len(requests_data):
        pagination_row.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="page_next")
        )
    
    if pagination_row:
        builder.row(*pagination_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.row(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
            callback_data="back_to_collab_menu"
        )
    )
    
    await cb.message.edit_text(
        text, 
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(
    CollaborationStates.view_requests, 
    F.data == "page_prev"
)
async def requests_prev_page(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    current_page = max(0, data["current_page"] - 1)
    await state.update_data(current_page=current_page)
    await display_requests_page(cb, state, session)

@router.callback_query(
    CollaborationStates.view_requests, 
    F.data == "page_next"
)
async def requests_next_page(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    current_page = data["current_page"] + 1
    await state.update_data(current_page=current_page)
    await display_requests_page(cb, state, session)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(
    CollaborationStates.view_requests, 
    F.data.startswith("accept_")
)
async def accept_collab_request(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é"""
    coupon_type_id = int(cb.data.split("_")[1])
    coupon_service = CouponService(session)
    success = await coupon_service.accept_collaboration(coupon_type_id)
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        data = await state.get_data()
        requests = [
            r for r in data["collab_requests"] 
            if r['id_coupon_type'] != coupon_type_id
        ]
        await state.update_data(collab_requests=requests)
        await cb.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
        await display_requests_page(cb, state, session)
    else:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

@router.callback_query(
    CollaborationStates.view_requests, 
    F.data.startswith("reject_")
)
async def reject_collab_request(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é"""
    coupon_type_id = int(cb.data.split("_")[1])
    coupon_service = CouponService(session)
    success = await coupon_service.reject_collaboration(coupon_type_id)
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        data = await state.get_data()
        requests = [
            r for r in data["collab_requests"] 
            if r['id_coupon_type'] != coupon_type_id
        ]
        await state.update_data(collab_requests=requests)
        await cb.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        await display_requests_page(cb, state, session)
    else:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

@router.callback_query(CollaborationStates.COLLABORATION_MENU, F.data == 'my_active_collabs')
async def show_my_collabs(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_collaborations(cb, state, session, 'my_collabs')

@router.callback_query(
    CollaborationStates.COLLABORATION_MENU, 
    F.data == 'all_active_collabs_main'
)
async def show_all_collabs_main(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await show_collaborations(cb, state, session, 'all_collabs')

async def show_collaborations(
    cb: CallbackQuery, 
    state: FSMContext, 
    session: AsyncSession,
    collab_type: str
):
    """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–π"""
    coupon_service = CouponService(session)
    collaborations = await coupon_service.get_collaborations(
        user_id_tg=cb.from_user.id,
        role='my_collabs' if collab_type == 'my_collabs' else 'all'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    serializable_collabs = []
    for collab in collaborations:
        serializable_collabs.append({
            'id_coupon_type': collab.id_coupon_type,
            'code_prefix': collab.code_prefix,
            'start_date': collab.start_date.isoformat(),
            'end_date': collab.end_date.isoformat(),
            'company_id': collab.company_id,
            'location_id': collab.location_id
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await state.update_data(
        collaborations=serializable_collabs,
        current_page=0,
        collab_type=collab_type
    )
    
    await state.set_state(CollaborationStates.view_collaborations)
    await display_collaborations_page(cb, state, session)

async def display_collaborations_page(
    cb: CallbackQuery, 
    state: FSMContext, 
    session: AsyncSession
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è–º–∏"""
    data = await state.get_data()
    collab_data = data["collaborations"]
    current_page = data["current_page"]
    collab_type = data["collab_type"]
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    page_size = 5
    start_index = current_page * page_size
    end_index = start_index + page_size
    page_items = collab_data[start_index:end_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    role_text = {
        'my_collabs': '–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏',
        'all_collabs': '–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏'
    }
    text = f"üè¢ <b>{role_text.get(collab_type, '–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏')}</b>\n\n"
    
    if not collab_data:
        text = "ü§∑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–π"
    else:
        for idx, collab in enumerate(page_items, start=1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö
            company_service = CompanyService(session)
            partner_company = await company_service.get_company_by_id(collab['company_id'])
            location = await company_service.get_location_by_id(collab['location_id'])
            agent_company = await company_service.get_company_by_id(location.id_comp)
            
            role = "üîπ –ö—É–ø–æ–Ω" if collab_type == 'my_collabs' else "üî∏ –ê–≥–µ–Ω—Ç"
            text += (
                f"{start_index + idx}. {role} {partner_company.Name_comp} ‚Üí {agent_company.Name_comp}\n"
                f"   üìÖ {collab['start_date'][:10]} - {collab['end_date'][:10]}\n"
                f"   üîë {collab['code_prefix']}\n\n"
            )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for collab in page_items:
        builder.row(
            InlineKeyboardButton(
                text=f"‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å {collab['code_prefix']}",
                callback_data=f"terminate_{collab['id_coupon_type']}"
            )
        )
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_row = []
    if current_page > 0:
        pagination_row.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="page_prev")
        )
    if end_index < len(collab_data):
        pagination_row.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="page_next")
        )
    
    if pagination_row:
        builder.row(*pagination_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.row(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
            callback_data="back_to_collab_menu"
        )
    )
    
    await cb.message.edit_text(
        text, 
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@router.callback_query(
    CollaborationStates.view_collaborations, 
    F.data == "page_prev"
)
async def prev_page(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    current_page = max(0, data["current_page"] - 1)
    await state.update_data(current_page=current_page)
    await display_collaborations_page(cb, state, session)

@router.callback_query(
    CollaborationStates.view_collaborations, 
    F.data == "page_next"
)
async def next_page(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    current_page = data["current_page"] + 1
    await state.update_data(current_page=current_page)
    await display_collaborations_page(cb, state, session)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏
@router.callback_query(
    CollaborationStates.view_collaborations, 
    F.data.startswith("terminate_")
)
async def terminate_collab(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    coupon_type_id = int(cb.data.split("_")[1])
    coupon_service = CouponService(session)
    terminated = await coupon_service.terminate_collaboration(coupon_type_id)
    
    if terminated:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        data = await state.get_data()
        collaborations = [
            c for c in data["collaborations"] 
            if c['id_coupon_type'] != coupon_type_id
        ]
        await state.update_data(collaborations=collaborations)
        await cb.answer("‚úÖ –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞")
        await display_collaborations_page(cb, state, session)

# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
@router.callback_query(
    CollaborationStates.view_collaborations, 
    F.data == "back_to_collab_menu"
)
async def back_to_menu(cb: CallbackQuery, state: FSMContext):
    await state.set_state(CollaborationStates.COLLABORATION_MENU)
    await cb.message.delete()
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–π
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–Ø –≤—ã–¥–∞—é –∫—É–ø–æ–Ω—ã", callback_data='iam_coupon'))
    builder.row(InlineKeyboardButton(text="–Ø –∞–≥–µ–Ω—Ç", callback_data='iam_agent'))
    builder.row(InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ (–≤—Å–µ)", callback_data='all_active_collabs_main'))
    builder.adjust(1)

    await cb.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è–º–∏',
        reply_markup=builder.as_markup()
    )

@router.callback_query(
    CollaborationStates.view_requests, 
    F.data == "back_to_collab_menu"
)
async def back_to_menu_from_requests(cb: CallbackQuery, state: FSMContext):
    await state.set_state(CollaborationStates.COLLABORATION_MENU)
    await cb.message.delete()
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–π
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–Ø –≤—ã–¥–∞—é –∫—É–ø–æ–Ω—ã", callback_data='iam_coupon'))
    builder.row(InlineKeyboardButton(text="–Ø –∞–≥–µ–Ω—Ç", callback_data='iam_agent'))
    builder.row(InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ (–≤—Å–µ)", callback_data='all_active_collabs_main'))
    builder.adjust(1)

    await cb.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è–º–∏',
        reply_markup=builder.as_markup()
    )

@router.callback_query(CollaborationStates.filter_comp_start_menu, F.data == 'iam_coupon_search')
async def search_collab(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    comp_service = CompanyService(session)

    selected_cities = data.get('filter_selected_city', [])
    selected_categories = data.get('filter_selected_category', [])

    current_page = data.get('current_page', 0)

    comp_list = await comp_service.get_companies_filtered_by_loc(
        city=selected_cities,
        category=selected_categories
    )

    keyboard = loc_comp_keyboard(
        companies=comp_list,
        page=current_page,
        selected_companies=data.get('selected_companies', [])
    )

    await cb.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏',
        reply_markup=keyboard
    )
    await state.set_state(CollaborationStates.filter_comp_menu)

@router.callback_query(CollaborationStates.filter_comp_menu)
async def handle_company_pagination(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    if cb.data.startswith('page_'):
        await handle_pagination(cb, state, session)
    elif cb.data.startswith('company_'):
        await comp_locations(cb, state, session)
    elif cb.data == 'filter_clear':
        await state.update_data(filter_selected_city=[], filter_selected_category=[], current_page=0)
        comp_service = CompanyService(session)
        comp_list = await comp_service.get_companies_filtered_by_loc(city=[], category=[])

        keyboard = loc_comp_keyboard(companies=comp_list, page=0, selected_companies=[])

        await cb.message.edit_reply_markup(reply_markup=keyboard)
        await handle_pagination(cb, state, session)
    elif cb.data == 'filter_category':
        await filter_categories(cb, state, session)
    elif cb.data == 'filter_city':
        await filter_cities(cb, state, session)
    elif cb.data == 'filter_back':
        await cb.message.delete()
        await start_collab_menu(message=cb.message, state=state)

@router.callback_query(CollaborationStates.choose_location)
async def paginate_location(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    company_id = data['company_id']
    comp_service = CompanyService(session)
    role_service = RoleService(session)
    if cb.data.startswith('page_'):
        new_page = int(cb.data.split('_')[1])
        locations = await comp_service.get_locations_by_company(company_id=company_id)
        keyboard = comp_location_keyboard(locations=locations, page=new_page)

        await cb.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é", reply_markup=keyboard)

        await state.update_data(company_id=company_id)

    elif cb.data == 'location_back':
        await search_collab(cb=cb, state=state, session=session)

    if cb.data.startswith('location_'):
        location_id = int(cb.data.split('_')[1])
        loc_info = await comp_service.get_location_by_id(location_id=location_id)
        comp_info = await comp_service.get_company_by_id(company_id=company_id)
        owner_info = await role_service.get_comp_owner(company_id=company_id, loc_id=location_id)

        await cb.message.edit_text(
            text=loc_info_text(comp=comp_info, loc=loc_info, owner=owner_info),
            reply_markup=collab_action_keyboard(comp_id=company_id)
        )

        await state.update_data(
            location_id=location_id,
            agent_owner_user_id=owner_info.id_tg,
            agent_owner_id=owner_info.id_tg)

        await state.set_state(CollaborationStates.collab_location_info)

@router.callback_query(CollaborationStates.collab_location_info, F.data == 'collab_back')
async def process_city_selection(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    await search_collab(cb=cb, state=state, session=session)

@router.callback_query(CreateLocationStates.get_loc_city)
async def process_city_selection(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    data = await state.get_data()
    selected_cities: list = data.get('filter_selected_city', [])
    current_page: int = data.get('current_page', 0)

    if cb.data.startswith('city_'):
        city_id = int(cb.data.split('_')[1])
        if city_id in selected_cities:
            selected_cities.remove(city_id)
        else:
            selected_cities.append(city_id)

        await state.update_data(filter_selected_city=selected_cities)

        city_service = CityLogger(session)
        cities = await city_service.get_all_cities()
        keyboard = loc_city_keyboard(cities, selected_cities, current_page)

        await cb.message.edit_reply_markup(reply_markup=keyboard)

    elif cb.data.startswith('page_'):
        new_page = int(cb.data.split('_')[1])
        await state.update_data(current_page=new_page)

        city_service = CityLogger(session)
        cities = await city_service.get_all_cities()
        keyboard = loc_city_keyboard(cities, selected_cities, new_page)

        await cb.message.edit_reply_markup(reply_markup=keyboard)

    elif cb.data == 'add_city':
        if not selected_cities:
            await cb.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥!", show_alert=True)
            return

        await state.set_state(CollaborationStates.filter_comp_menu)
        await search_collab(cb=cb, state=state, session=session)
    elif cb.data == 'back_city':
        await state.update_data(filter_selected_city=[])
        await state.set_state(CollaborationStates.filter_comp_menu)
        await search_collab(cb=cb, state=state, session=session)

@router.callback_query(CreateLocationStates.get_loc_category)
async def process_category_selection(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    data = await state.get_data()
    selected_categories: list = data.get('filter_selected_category', [])
    current_page: int = data.get('current_page', 0)

    if cb.data.startswith('category_'):
        category_id = int(cb.data.split('_')[1])
        if category_id in selected_categories:
            selected_categories.remove(category_id)
        else:
            selected_categories.append(category_id)

        await state.update_data(filter_selected_category=selected_categories)

        category_service = CategoryService(session)
        categories = await category_service.get_all_categories()
        keyboard = loc_categories_keyboard(categories, selected_categories, current_page)

        await cb.message.edit_reply_markup(reply_markup=keyboard)

    elif cb.data.startswith('page_'):
        new_page = int(cb.data.split('_')[1])
        await state.update_data(current_page=new_page)

        category_service = CategoryService(session)
        categories = await category_service.get_all_categories()
        keyboard = loc_categories_keyboard(categories, selected_categories, new_page)

        await cb.message.edit_reply_markup(reply_markup=keyboard)

    elif cb.data == 'add_category':
        if not selected_categories:
            await cb.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
            return

        await state.set_state(CollaborationStates.filter_comp_menu)
        await search_collab(cb=cb, state=state, session=session)

    elif cb.data == 'back_category':
        await state.set_state(CollaborationStates.filter_comp_menu)
        await search_collab(cb=cb, state=state, session=session)