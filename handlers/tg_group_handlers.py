from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from sqlalchemy import select
from utils.database.models import TgGroup
from services.tg_group_service import TgGroupService
from services.company_service import CompanyService
from sqlalchemy.ext.asyncio import AsyncSession
from utils.states import PartnerStates
from sqlalchemy.orm import selectinload
import logging
from aiogram.exceptions import TelegramBadRequest  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram

router = Router()
logger = logging.getLogger(__name__)

PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

class TgGroupStates(StatesGroup):
    waiting_for_group_id = State()
    waiting_for_group_name = State()

@router.message(PartnerStates.company_menu, F.text == "–¢–ì –ì—Ä—É–ø–ø—ã")
async def manage_tg_groups(message: Message, session: AsyncSession, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram-–≥—Ä—É–ø–ø–∞–º–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º company_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    company_id = data.get('company_id')
    
    if not company_id:
        await message.answer("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return

    group_service = TgGroupService(session)
    groups = await group_service.get_groups_by_company(company_id)
    
    if not groups:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_group")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        await message.answer(
            "–í —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
            reply_markup=keyboard
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º company_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(company_id=company_id, groups=[], page=0)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –∏ company_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    groups_data = [{
        'id_tg_group': g.id_tg_group,
        'group_id': g.group_id,
        'name': g.name,
        'is_active': g.is_active
    } for g in groups]
    
    await state.update_data(company_id=company_id, groups=groups_data, page=0)
    await show_groups_page(message, state)

async def show_groups_page(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    data = await state.get_data()
    page = data.get('page', 0)
    groups = data.get('groups', [])
    
    start_idx = page * PAGE_SIZE
    end_idx = start_idx + PAGE_SIZE
    page_groups = groups[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    for group in page_groups:
        builder.button(
            text=group['name'], 
            callback_data=f"group_{group['id_tg_group']}"
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data="prev_page"
        ))
    
    if end_idx < len(groups):
        pagination_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
            callback_data="next_page"
        ))
    
    if pagination_buttons:
        builder.row(*pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_group"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    
    await message.answer(
        "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram-–≥—Ä—É–ø–ø–∞–º–∏:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "prev_page")
async def prev_page(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    data = await state.get_data()
    current_page = data.get('page', 0)
    if current_page > 0:
        await state.update_data(page=current_page - 1)
        await callback.message.delete()
        await show_groups_page(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "next_page")
async def next_page(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    data = await state.get_data()
    current_page = data.get('page', 0)
    groups = data.get('groups', [])
    
    if (current_page + 1) * PAGE_SIZE < len(groups):
        await state.update_data(page=current_page + 1)
        await callback.message.delete()
        await show_groups_page(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "add_group")
async def add_group_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –≤ Telegram:")
    await state.set_state(TgGroupStates.waiting_for_group_id)
    await callback.answer()

@router.message(TgGroupStates.waiting_for_group_id)
async def process_group_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –≥—Ä—É–ø–ø—ã"""
    try:
        group_id = int(message.text)
        bot_id = (await message.bot.get_me()).id
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–ª–µ–Ω–µ —á–∞—Ç–∞
            member = await message.bot.get_chat_member(chat_id=group_id, user_id=bot_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ –Ω–µ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É
            if member.status in ['left', 'kicked']:
                await message.answer("‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            else:
                await state.update_data(group_id=group_id, is_active=True)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
                await state.set_state(TgGroupStates.waiting_for_group_name)
                
        except TelegramBadRequest as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫
            if "chat not found" in str(e).lower() or "CHAT_NOT_FOUND" in str(e):
                await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.")
            elif "bot is not a member" in str(e).lower() or "USER_NOT_PARTICIPANT" in str(e):
                await message.answer("‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.")
            elif "forbidden" in str(e).lower() or "FORBIDDEN" in str(e):
                await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
                await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
            
    except ValueError:
        await message.answer("‚ùå ID –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(TgGroupStates.waiting_for_group_name)
async def process_group_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    group_name = message.text.strip()
    if not group_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    data = await state.get_data()
    group_id = data['group_id']
    company_id = data['company_id']
    is_active = data.get('is_active', False)  # –°—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    group_service = TgGroupService(session)
    existing = await group_service.get_group_by_id(group_id)
    if existing:
        await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        await state.set_state(PartnerStates.company_menu)
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
    try:
        await group_service.create_group(
            group_id=group_id,
            name=group_name,
            company_id=company_id,
            is_active=is_active  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å
        )
        await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        await state.set_state(PartnerStates.company_menu)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º company_id –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
    await state.update_data(company_id=company_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await manage_tg_groups(message, session, state)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–∏
    await state.set_state(PartnerStates.company_menu)

@router.callback_query(F.data.startswith("group_"))
async def view_group(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split("_")[1])
    
    # –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
    stmt = select(TgGroup).options(selectinload(TgGroup.company)).where(TgGroup.id_tg_group == group_id)
    result = await session.execute(stmt)
    group = result.scalars().first()
    
    if not group:
        await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
    actual_status = "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    try:
        bot_id = (await callback.bot.get_me()).id
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
            member = await callback.bot.get_chat_member(chat_id=group.group_id, user_id=bot_id)
            if member.status not in ['left', 'kicked']:
                actual_status = "–ê–∫—Ç–∏–≤–Ω–∞"
        except TelegramBadRequest as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ Telegram
            if "chat not found" in str(e).lower() or "CHAT_NOT_FOUND" in str(e):
                actual_status = "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            elif "bot is not a member" in str(e).lower() or "USER_NOT_PARTICIPANT" in str(e):
                actual_status = "–ë–æ—Ç –Ω–µ –≤ –≥—Ä—É–ø–ø–µ"
            elif "forbidden" in str(e).lower() or "FORBIDDEN" in str(e):
                actual_status = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
            else:
                actual_status = f"–û—à–∏–±–∫–∞: {str(e)[:50]}"
        except Exception as e:
            actual_status = f"–û—à–∏–±–∫–∞: {str(e)[:50]}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        actual_status = "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üì¢ –ì—Ä—É–ø–ø–∞: {group.name}\n"
        f"üÜî ID: {group.group_id}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {group.company.Name_comp}\n"
        f"üîπ –°—Ç–∞—Ç—É—Å: {actual_status}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
    if actual_status != "–ê–∫—Ç–∏–≤–Ω–∞":
        response += "\n\n‚ö†Ô∏è –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_groups"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_group_{group.id_tg_group}")
        ]
    ])
    
    await callback.message.edit_text(response, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_groups")
async def back_to_groups(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø"""
    await callback.message.delete()
    await show_groups_page(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–∏"""
    data = await state.get_data()
    company_id = data.get('company_id')
    if not company_id:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        return

    comp_service = CompanyService(session)
    company = await comp_service.get_company_by_id(company_id)
    if not company:
        await callback.answer("–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–∏
    company_info = (
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company.Name_comp}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏–π: {len(company.locations)}"
    )

    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="–õ–æ–∫–∞—Ü–∏–∏"))
    builder.row(KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –õ–æ–∫–∞—Ü–∏—é"))
    builder.row(KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ö–æ–º–ø–∞–Ω–∏—é"))
    builder.row(KeyboardButton(text="–¢–ì –ì—Ä—É–ø–ø—ã"))
    builder.row(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()
    await callback.message.answer(
        company_info,
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–∏
    await state.set_state(PartnerStates.company_menu)
    await callback.answer()

@router.callback_query(F.data.startswith("delete_group_"))
async def delete_group(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split("_")[2])
    group_service = TgGroupService(session)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º company_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
        data = await state.get_data()
        company_id = data.get('company_id')
        
        # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏
        success = await group_service.delete_group(group_id, company_id)
        
        if success:
            await callback.message.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await callback.message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã")
    
    await callback.message.delete()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º company_id –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞
    await state.update_data(company_id=company_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    await manage_tg_groups(callback.message, session, state)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(PartnerStates.company_menu)
    await callback.answer()